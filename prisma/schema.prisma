// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//Murilo Leandro
model User {
  id Int @id @default (autoincrement())

  email String @unique
  password String
  document String @unique
  phone String
  birth DateTime
  signature Boolean
  isActive Boolean @map("is_active")

  createdAt DateTime @map("created_at") @default(now())
  updateAt DateTime @map("update_at") 

  services    Service[]
  clients     Client[]
  orders      Order[]
  products    Product[]
  signatures  Signature[]

  @@map("users")
}

//Marcos
model Signature{
  id Int @id @default (autoincrement())

  type String
  isActive Boolean @map("is_active")

  createdAt DateTime @map("created_at") @default(now())
  updateAt DateTime @map("update_at")

  userId     Int      @map("user_id")
  user     User   @relation(fields: [userId], references: [id])

  @@map("signatures")
}

//Leonardo
model Client {
  id Int @id @default (autoincrement())

  name String
  document String  @unique
  cep String
  phone String
  email String  @unique
  address String
  number Int
  neighborhood String
  state String
  city String
  isActive Boolean @map("is_active")

  createdAt DateTime @map("created_at") @default(now())
  updateAt DateTime @map("update_at") 

  orders    Order[]

  userId     Int      @map("user_id")

  user     User   @relation(fields: [userId], references: [id])

  @@map("clients")
}

// Murilo Andrade
model Service {
  id Int @id @default (autoincrement())

  nameService String @map("name_service")
  price Float 
  description String
  observations String
  isActive Boolean @map("is_active")

  createAdaT DateTime @map("created_at") @default(now())
  upatedAt DateTime @map("update_at") 

  orders      Order?
  userId    Int   @map("user_id")

  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("services")
}

// Leonardo
model Product {
  id Int @id @default (autoincrement())

  name String
  category String
  description String
  salesUnit String      @map("sales_unit")
  purchasePrice String  @map("purchase_price")
  salePrice String      @map("sale_price")
  observations String
  isActive Boolean      @map("is_active")
 
  updatedAt DateTime    @map("update_at") 

  shops     Shop[]

  userId    Int   @map("user_id")

  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("products")
}

// Marcos
model Shop{
  id Int @id @default (autoincrement())

  amount Int
  salePrice Float       @map("sale_price")

  creadtedAt DateTime   @map("created_at") @default(now())
  updatedAt DateTime    @map("update_at") 

  productId  Int      @map("product_id")
  orderId    Int      @map("orderId_id")

  product    Product  @relation(fields: [productId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])

  @@map("shops")
}

// Murilo Andrade
model Order{
  id Int @id @default (autoincrement())

  salePrice Float     @map("sale_price")
  servicePrice Float   @map("service_price")
  productPrice Float   @map("product_price")

  creadtedAt DateTime   @map("created_at") @default(now())
  updatedAt DateTime    @map("update_at") 

  shops     Shop[]

  userId     Int      @map("user_id")
  serviceId  Int      @map("service_id") @unique
  clientId   Int      @map("client_id")
  

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id])
  client     Client   @relation(fields: [clientId], references: [id])


  @@map("orders")
}

